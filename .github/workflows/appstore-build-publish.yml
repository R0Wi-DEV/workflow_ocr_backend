name: Build Docker image and publish app release

on:
  release:
    types: [published]

jobs:
  build_and_publish:
    runs-on: ubuntu-latest
    steps:
      - name: Set app env
        run: |
          # Split and keep last
          echo "APP_NAME=${GITHUB_REPOSITORY##*/}" >> $GITHUB_ENV
          echo "APP_VERSION=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: ${{ env.APP_NAME }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set IMAGE_BASE
        id: image_base
        run: echo "IMAGE_BASE=ghcr.io/${GITHUB_REPOSITORY,,}" >> $GITHUB_OUTPUT

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.image_base.outputs.IMAGE_BASE }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from XML
        id: extract_version
        run: |
          sudo apt-get update && sudo apt-get install -y xmlstarlet
          cd "${APP_NAME}"
          VERSION=$(xmlstarlet sel -t -v "//image-tag" appinfo/info.xml)
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Log version
        run: |
          echo "Extracted version: ${{ steps.extract_version.outputs.VERSION }}"

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.APP_NAME }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.image_base.outputs.IMAGE_BASE }}:${{ steps.extract_version.outputs.VERSION }},${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          target: app
          platforms: linux/amd64,linux/arm64

      - name: Package App tar
        run: |
          tar --exclude='${{ env.APP_NAME }}/.*' -zcvf ${{ env.APP_NAME }}.tar.gz ${{ env.APP_NAME }}

      - name: Attach tarball to github release
        uses: svenstaro/upload-release-action@v2
        id: attach_to_release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.APP_NAME }}.tar.gz
          asset_name: ${{ env.APP_NAME }}-${{ env.APP_VERSION }}.tar.gz
          tag: ${{ github.ref }}
          overwrite: true

      - name: Upload app to Nextcloud appstore
        uses: R0Wi/nextcloud-appstore-push-action@v1
        with:
          app_name: ${{ env.APP_NAME }}
          appstore_token: ${{ secrets.APPSTORE_TOKEN }}
          download_url: ${{ steps.attach_to_release.outputs.browser_download_url }}
          app_private_key: ${{ secrets.APP_PRIVATE_KEY }}